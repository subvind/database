# NESTCODER

You are NestCoder, a HTMX, EJS and TypeScript/NestJS language coding assistant.

## INPUT: 

You will receive a TARGET <FILE/> in the EJS or TypeScript/NestJS language, some additional <FILE/>'s for context, and a change or refactor <REQUEST/>, from the user.

## OUTPUT:

You must answer with one or more <FILE/> tags, including files to be overwritten, in order to fulfill the user's request.

---

# EXAMPLE NESTCODER USAGE

## Suppose you're given the following INPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/_.ts">
// A polymorphic List with two constructors:
// - Cons: appends an element to a list
// - Nil: the empty list
export type List<A>
  = { "$": "Cons", head: A, tail: List<A> }
  | { "$": "Nil" };
</FILE>

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts" TARGET>
// The map function for List, to be implemented
import { List } from "./_";

export function map<A, B>(fn: (a: A) => B, list: List<A>): List<B> {
  ?
}
</FILE>

<REQUEST>
complete the map function
</REQUEST>

## Then, you must answer with the following OUTPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts">
import { List } from "./_";

// Applies a function to each element of a list.
// - fn: the function to be applied
// - xs: the elements to apply fn to
// = a new list with fn applied to all elements
export function map<A, B>(xs: List<A>, fn: (a: A) => B): List<B> {
  switch (xs.$) {
    case "Cons": {
      var head = fn(xs.head);
      var tail = map(xs.tail, fn);
      return { $: "Cons", head, tail };
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
</FILE>

(Because it fulfills the user's request perfectly.)

---

# GUIDE FOR THE TYPESCRIPT LANGUAGE

- Your code must be inspired by pure functional programming languages like Haskell.

- Every file must declare only, and only one, top-level function or datatype.

- Functions must be pure, using switch instead of 'if-else' or 'case-of'.

- When defining local variables, align equal signs whenever possible.

- Use CamelCase for everything. (IMPORTANT)

- A 'Foo/Bar' top-level definition must be either on './Foo/Bar.ts' or './Foo/Bar/_.ts'. 

# GUIDE FOR THE EJS LANGUAGE

- Use HTMX for frontend.

## Top-Level Function

Every .ts file must define ONE top-level function. Example:

```typescript
// Calculates the size of an HTerm
// - term: the HTerm to measure
// = the number of nodes in the term
export function size(term: HTerm): number {
  switch (term.$) {
    case "Lam": {
      var bod_size = size(term.bod({$: "Var", nam: term.nam}));
      return 1 + bod_size;
    }
    case "App": {
      var fun_size = size(term.fun);
      var arg_size = size(term.arg);
      return 1 + fun_size + arg_size;
    }
    case "Var": {
      return 1;
    }
  }
}
```

Where:
- The function name is defined (e.g., 'size')
- Parameters are specified with their types (e.g., 'term: HTerm')
- The return type is specified (e.g., ': number')
- The function body uses a switch statement for pattern matching
- Local variables are used to make the code less horizontal

## Top-Level Datatype

Alternatively, a .ts file can also define a datatype (ADT). Example:

```typescript
// Represents a Higher-Order Abstract Syntax Term
// - Lam: lambda abstraction
// - App: function application
// - Var: variable
export type HTerm
  = { $: "Lam", bod: (x: HTerm) => HTerm }
  | { $: "App", fun: HTerm, arg: HTerm }
  | { $: "Var", nam: string }
```

ADTs must follow this convention:
- Constructors represented as objects
- The dollar-sign is used for the constructor name
- Other object fields are the constructor fields

## Idiomatic TypeScript Examples

Below are some additional idiomatic TypeScript in the purely functional style: 

### List/zip.ts

```typescript
import { List } from "./_";

// Combines two lists into a list of pairs
// - xs: the first input list
// - ys: the second input list
// = a new list of pairs, with length equal to the shorter input list
export function zip<A, B>(xs: List<A>, ys: List<B>): List<[A, B]> {
  switch (xs.$) {
    case "Cons": {
      switch (ys.$) {
        case "Cons": {
          var head = [xs.head, ys.head] as [A,B];
          var tail = zip(xs.tail, ys.tail);
          return { $: "Cons", head, tail };
        }
        case "Nil": {
          return { $: "Nil" };
        }
      }
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### List/filter.ts

```typescript
import { List } from "./_";

// Filters a list based on a predicate function
// - xs: the input list
// - pred: the predicate function to test each element
// = a new list containing only elements that satisfy the predicate
export function filter<A>(xs: List<A>, pred: (a: A) => boolean): List<A> {
  switch (xs.$) {
    case "Cons": {
      var head = xs.head;
      var tail = filter(xs.tail, pred);
      return pred(xs.head) ? { $: "Cons", head, tail } : tail;
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### Tree/_.ts

```typescript
// Represents a binary tree
// - Node: an internal node with a value and two subtrees
// - Leaf: a leaf node (empty)
export type Tree<A>
  = { $: "Node", val: A, left: Tree<A>, right: Tree<A> }
  | { $: "Leaf" };
```

### Tree/sum.ts

```typescript
import { Tree } from "./_";

// Sums all values in a numeric tree
// - tree: the tree to sum
// = the sum of all values in the tree
export function sum(tree: Tree<number>): number {
  switch (tree.$) {
    case "Node": {
      var left  = sum(tree.left);
      var right = sum(tree.right);
      return tree.val + left + right;
    }
    case "Leaf": {
      return 0;
    }
  }
}
```

### V3/_.ts

```typescript
// Represents a 3D vector
export type V3
  = { $: "V3", x: number, y: number, z: number };
```

### V3/dot.ts

```typescript
import { V3 } from "./_";

// Calculates the dot product of two 3D vectors
// - a: the first vector
// - b: the second vector
// = the dot product of a and b
export function dot(a: V3, b: V3): number {
  return a.x * b.x + a.y * b.y + a.z * b.z;
}
```

---

# NOTES

- Make ONLY the changes necessary to correctly fulfill the user's REQUEST.

- Do NOT fix, remove, complete or alter any parts unrelated to the REQUEST.

- Pay attention to the user's style, and mimic it as close as possible.

- Pay attention to the TypeScript examples and mimic their style as a default.

- Consult TypeScript guide to emit idiomatic correct code.

- Do NOT use or assume the existence of files that weren't shown to you.

- Be precise and careful in your modifications.

---

# TASK

You will now be given the actual INPUT you must work with.

<FILE path="/home/travis/Projects/database/src/storage/storage.module.ts">
import { Module } from '@nestjs/common';
import { StorageService } from './storage.service';
import { StorageController } from './storage.controller';

@Module({
  imports: [
  ],
  providers: [StorageService],
  controllers: [StorageController],
  exports: [],
})
export class StorageModule {}
</FILE>
<FILE path="/home/travis/Projects/database/src/storage/storage.service.ts">
import { Injectable, OnModuleInit, OnModuleDestroy, UnauthorizedException } from '@nestjs/common';
import * as fs from 'fs/promises';
import * as bcrypt from 'bcrypt';
import { JwtService } from '@nestjs/jwt';

interface User {
  username: string;
  passwordHash: string;
  databases: number[];
}

@Injectable()
export class StorageService implements OnModuleInit, OnModuleDestroy {
  private databases: Map<number, Map<string, any>> = new Map();
  private users: Map<string, User> = new Map();
  private walFile: string = 'wal.log';
  private snapshotFile: string = 'snapshot.json';
  private usersFile: string = 'users.json';
  private walStream: fs.FileHandle | null = null;

  constructor(private jwtService: JwtService) {}

  async onModuleInit() {
    await this.loadSnapshot();
    await this.loadUsers();
    await this.replayWAL();
    this.walStream = await fs.open(this.walFile, 'a');
  }

  async onModuleDestroy() {
    await this.createSnapshot();
    await this.saveUsers();
    await this.walStream?.close();
  }

  private async loadSnapshot() {
    try {
      const data = await fs.readFile(this.snapshotFile, 'utf-8');
      const parsedData = JSON.parse(data);
      this.databases = new Map(Object.entries(parsedData).map(([key, value]) => [Number(key), new Map(Object.entries(value))]));
    } catch (error) {
      console.log('No snapshot found or error loading snapshot');
    }
  }

  private async loadUsers() {
    try {
      const data = await fs.readFile(this.usersFile, 'utf-8');
      const parsedData = JSON.parse(data);
      this.users = new Map(Object.entries(parsedData));
    } catch (error) {
      console.log('No users file found or error loading users');
    }
  }

  private async replayWAL() {
    try {
      const data = await fs.readFile(this.walFile, 'utf-8');
      const lines = data.split('\n').filter(line => line.trim() !== '');
      for (const line of lines) {
        const [operation, ...args] = JSON.parse(line);
        switch (operation) {
          case 'set':
            this.set(args[0], Number(args[1]), args[2], args[3]);
            break;
          case 'incr':
            this.incr(args[0], Number(args[1]), args[2]);
            break;
          case 'sadd':
            this.sadd(args[0], Number(args[1]), args[2], ...args.slice(3));
            break;
          case 'del':
            this.del(args[0], Number(args[1]), ...args.slice(2));
            break;
          case 'expire':
            this.expire(args[0], Number(args[1]), args[2], Number(args[3]));
            break;
          case 'rpush':
            this.rpush(args[0], Number(args[1]), args[2], ...args.slice(3));
            break;
          case 'lpop':
            this.lpop(args[0], Number(args[1]), args[2]);
            break;
        }
      }
    } catch (error) {
      console.log('No WAL found or error replaying WAL');
    }
  }

  private async appendToWAL(operation: string, ...args: any[]) {
    const logEntry = JSON.stringify([operation, ...args]) + '\n';
    await this.walStream?.write(logEntry);
  }

  private async createSnapshot() {
    const snapshotData = JSON.stringify(Object.fromEntries(Array.from(this.databases.entries()).map(([key, value]) => [key, Object.fromEntries(value)])));
    await fs.writeFile(this.snapshotFile, snapshotData);
    await fs.truncate(this.walFile, 0);
  }

  private async saveUsers() {
    const userData = JSON.stringify(Object.fromEntries(this.users));
    await fs.writeFile(this.usersFile, userData);
  }

  async createUser(username: string, password: string): Promise<void> {
    if (this.users.has(username)) {
      throw new Error('User already exists');
    }
    const saltRounds = 10;
    const passwordHash = await bcrypt.hash(password, saltRounds);
    const newUser: User = {
      username,
      passwordHash,
      databases: [],
    };
    this.users.set(username, newUser);
    await this.saveUsers();
  }

  async validateUser(username: string, password: string): Promise<any> {
    const user = this.users.get(username);
    if (user && await bcrypt.compare(password, user.passwordHash)) {
      const { passwordHash, ...result } = user;
      return result;
    }
    return null;
  }

  async login(user: any) {
    const payload = { username: user.username, sub: user.userId };
    return {
      access_token: this.jwtService.sign(payload),
    };
  }

  async assignUserToDatabase(username: string, dbIndex: number): Promise<void> {
    const user = this.users.get(username);
    if (!user) throw new Error('User not found');
    if (!user.databases.includes(dbIndex)) {
      user.databases.push(dbIndex);
      await this.saveUsers();
    }
  }

  private getDatabase(dbIndex: number): Map<string, string[]> {
    if (!this.databases.has(dbIndex)) {
      this.databases.set(dbIndex, new Map());
    }
    return this.databases.get(dbIndex)!;
  }

  private checkUserAccess(username: string, dbIndex: number): boolean {
    const user = this.users.get(username);
    return user ? user.databases.includes(dbIndex) : false;
  }

  async rpush(username: string, dbIndex: number, key: string, ...values: string[]): Promise<number> {
    if (!this.checkUserAccess(username, dbIndex)) {
      throw new UnauthorizedException('User does not have access to this database');
    }
    const db = this.getDatabase(dbIndex);
    if (!db.has(key)) {
      db.set(key, []);
    }
    const list = db.get(key)!;
    list.push(...values);
    await this.appendToWAL('rpush', username, dbIndex, key, ...values);
    return list.length;
  }

  lrange(username: string, dbIndex: number, key: string, start: number, stop: number): string[] {
    if (!this.checkUserAccess(username, dbIndex)) {
      throw new UnauthorizedException('User does not have access to this database');
    }
    const db = this.getDatabase(dbIndex);
    const list = db.get(key) || [];
    if (start < 0) start = Math.max(list.length + start, 0);
    if (stop < 0) stop = Math.max(list.length + stop, 0);
    stop = Math.min(stop, list.length - 1);
    return list.slice(start, stop + 1);
  }

  async lpop(username: string, dbIndex: number, key: string): Promise<string | null> {
    if (!this.checkUserAccess(username, dbIndex)) {
      throw new UnauthorizedException('User does not have access to this database');
    }
    const db = this.getDatabase(dbIndex);
    const list = db.get(key);
    if (!list || list.length === 0) {
      return null;
    }
    const item = list.shift()!;
    await this.appendToWAL('lpop', username, dbIndex, key);
    return item;
  }

  llen(username: string, dbIndex: number, key: string): number {
    if (!this.checkUserAccess(username, dbIndex)) {
      throw new UnauthorizedException('User does not have access to this database');
    }
    const db = this.getDatabase(dbIndex);
    return db.get(key)?.length || 0;
  }

  // String Operations
  async set(username: string, dbIndex: number, key: string, value: string): Promise<'OK'> {
    if (!this.checkUserAccess(username, dbIndex)) {
      throw new UnauthorizedException('User does not have access to this database');
    }
    const db = this.getDatabase(dbIndex);
    db.set(key, [value]); // Store value as an array
    await this.appendToWAL('set', username, dbIndex, key, value);
    return 'OK';
  }

  get(username: string, dbIndex: number, key: string): string | null {
    if (!this.checkUserAccess(username, dbIndex)) {
      throw new UnauthorizedException('User does not have access to this database');
    }
    const db = this.getDatabase(dbIndex);
    const value = db.get(key);
    return Array.isArray(value) ? value[0] : null;
  }

  async incr(username: string, dbIndex: number, key: string): Promise<number> {
    if (!this.checkUserAccess(username, dbIndex)) {
      throw new UnauthorizedException('User does not have access to this database');
    }
    const db = this.getDatabase(dbIndex);
    let value = db.get(key);
    if (!value) {
      value = ['0'];
    } else if (!Array.isArray(value) || typeof parseInt(value[0]) !== 'number') {
      throw new Error('Value is not a number');
    }
    let number = parseInt(value[0]) + 1;
    value[0] = `${number}`;
    db.set(key, value);
    await this.appendToWAL('incr', username, dbIndex, key);
    return number;
  }

  async sadd(username: string, dbIndex: number, key: string, ...members: string[]): Promise<number> {
    if (!this.checkUserAccess(username, dbIndex)) {
      throw new UnauthorizedException('User does not have access to this database');
    }
    const db = this.getDatabase(dbIndex);
    let set = db.get(key);
    if (!set || !Array.isArray(set)) {
      set = [];
      db.set(key, set);
    }
    const initialSize = set.length;
    members.forEach(member => {
      if (!set.includes(member)) {
        set.push(member);
      }
    });
    const addedCount = set.length - initialSize;
    await this.appendToWAL('sadd', username, dbIndex, key, ...members);
    return addedCount;
  }

  smembers(username: string, dbIndex: number, key: string): string[] {
    if (!this.checkUserAccess(username, dbIndex)) {
      throw new UnauthorizedException('User does not have access to this database');
    }
    const db = this.getDatabase(dbIndex);
    const set = db.get(key);
    return set instanceof Set ? Array.from(set) : [];
  }

  sismember(username: string, dbIndex: number, key: string, member: string): boolean {
    if (!this.checkUserAccess(username, dbIndex)) {
      throw new UnauthorizedException('User does not have access to this database');
    }
    const db = this.getDatabase(dbIndex);
    const set = db.get(key);
    return set instanceof Set ? set.has(member) : false;
  }

  // Key Management
  async del(username: string, dbIndex: number, ...keys: string[]): Promise<number> {
    if (!this.checkUserAccess(username, dbIndex)) {
      throw new UnauthorizedException('User does not have access to this database');
    }
    const db = this.getDatabase(dbIndex);
    let count = 0;
    for (const key of keys) {
      if (db.delete(key)) {
        count++;
      }
    }
    await this.appendToWAL('del', username, dbIndex, ...keys);
    return count;
  }

  exists(username: string, dbIndex: number, ...keys: string[]): number {
    if (!this.checkUserAccess(username, dbIndex)) {
      throw new UnauthorizedException('User does not have access to this database');
    }
    const db = this.getDatabase(dbIndex);
    return keys.filter(key => db.has(key)).length;
  }

  async expire(username: string, dbIndex: number, key: string, seconds: number): Promise<boolean> {
    if (!this.checkUserAccess(username, dbIndex)) {
      throw new UnauthorizedException('User does not have access to this database');
    }
    const db = this.getDatabase(dbIndex);
    if (!db.has(key)) {
      return false;
    }
    setTimeout(() => {
      db.delete(key);
    }, seconds * 1000);
    await this.appendToWAL('expire', username, dbIndex, key, seconds);
    return true;
  }

  async triggerSnapshot(): Promise<void> {
    await this.createSnapshot();
    await this.saveUsers();
  }
}
</FILE>
<FILE path="/home/travis/Projects/database/src/auth/auth.module.ts">
import { Module } from '@nestjs/common';
import { JwtModule } from '@nestjs/jwt';
import { PassportModule } from '@nestjs/passport';
import { StorageService } from '../storage/storage.service';
import { JwtStrategy } from './jwt.strategy';

@Module({
  imports: [
    PassportModule,
    JwtModule.register({
      secret: 'your_jwt_secret', // TODO: In production, use an environment variable
      signOptions: { expiresIn: '60m' },
    }),
  ],
  providers: [StorageService, JwtStrategy],
  exports: [StorageService],
})
export class AuthModule {}
</FILE>
<FILE path="/home/travis/Projects/database/src/app.module.ts">
import { Module } from '@nestjs/common';
import { AuthModule } from './auth/auth.module';
import { StorageModule } from './storage/storage.module';

@Module({
  imports: [StorageModule, AuthModule],
})
export class AppModule {}

</FILE>
<FILE path="/home/travis/Projects/database/src/main.ts">
import { NestFactory } from '@nestjs/core';
import { NestExpressApplication } from '@nestjs/platform-express';
import { AppModule } from './app.module';
import { CustomLogger } from './logger/custom-logger';

async function bootstrap(logger: CustomLogger) {
  const app = await NestFactory.create<NestExpressApplication>(AppModule, { logger });
  await app.listen(6969);
  console.log('Database is running: http://localhost:6969');
}

// Create the CustomLogger with the AmqpConnection
const logger = new CustomLogger('Bootstrap');

bootstrap(logger);

</FILE>
<FILE path="/home/travis/Projects/database/src/auth/jwt.strategy.ts">
import { ExtractJwt, Strategy } from 'passport-jwt';
import { PassportStrategy } from '@nestjs/passport';
import { Injectable } from '@nestjs/common';

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  constructor() {
    super({
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      ignoreExpiration: false,
      secretOrKey: 'your_jwt_secret', // In production, use an environment variable
    });
  }

  async validate(payload: any) {
    return { userId: payload.sub, username: payload.username };
  }
}
</FILE>
<FILE path="/home/travis/Projects/database/src/auth/jwt-auth.guard.ts">
import { Injectable } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';

@Injectable()
export class JwtAuthGuard extends AuthGuard('jwt') {}

</FILE>
<FILE path="/home/travis/Projects/database/src/auth/local-auth.guard.ts">
import { Injectable } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';

@Injectable()
export class LocalAuthGuard extends AuthGuard('local') {}
</FILE>
<FILE path="/home/travis/Projects/database/src/logger/custom-logger.ts">
import { ConsoleLogger, Injectable, Inject } from '@nestjs/common';
import * as fs from 'fs';
import * as path from 'path';

@Injectable()
export class CustomLogger extends ConsoleLogger {
  constructor(
    private logId: string,
  ) {
    super(logId);
    this.setLogLevels(['log', 'error', 'warn', 'debug', 'verbose']);
  }

  log(message: string, context?: string) {
    this.printMessage(message, 'log', context);
    // this.emitLogEvent('log', message);
  }

  warn(message: string, context?: string) {
    this.printMessage(message, 'warn', context);
    // this.emitLogEvent('warn', message);
  }

  error(message: string, trace?: string, context?: string) {
    this.printMessage(message, 'error', context);
    // this.emitLogEvent('error', message);
    if (trace) {
      this.printMessage(trace, 'error', context);
    }
  }

  debug(message: string, context?: string) {
    this.printMessage(message, 'debug', context);
  }

  verbose(message: string, context?: string) {
    this.printMessage(message, 'verbose', context);
  }

  private printMessage(message: string, logLevel: string, context?: string) {
    const output = context ? `[${context}] ${message}` : message;
    console.log(`[${this.getNow()}] [${logLevel.toUpperCase()}] [${this.logId}] ${output}`);
  }

  private getNow(): string {
    return new Date().toISOString();
  }

  static write_to_file(message: string) {
    const logFile = path.join(process.cwd(), 'start:dev.stdout.txt');
    fs.appendFile(logFile, message, (err) => {
      if (err) {
        console.error('Failed to write to log file:', err);
      }
    });
  }

  static clearSTDOUT() {
    const logFile = path.join(process.cwd(), 'start:dev.stdout.txt');
    try {
      fs.writeFileSync(logFile, '');
      console.log(`Log file cleared at ${logFile}`);
    } catch (error) {
      console.error('Failed to clear log file:', error);
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/database/test/key-value.test.ts">

</FILE>
<FILE path="/home/travis/Projects/database/test/message-queue.test.ts">

</FILE>
<FILE path="/home/travis/Projects/database/test/session-cache.test.ts">

</FILE>
<FILE path="start:dev.stdout.txt" TARGET>
c[[90m12:26:39 PM[0m] Starting compilation in watch mode...

[[90m12:26:41 PM[0m] Found 0 errors. Watching for file changes.

[2024-09-08T17:26:41.516Z] [LOG] [Bootstrap] [NestFactory] Starting Nest application...
[2024-09-08T17:26:41.526Z] [LOG] [Bootstrap] [InstanceLoader] AppModule dependencies initialized
[2024-09-08T17:26:41.526Z] [LOG] [Bootstrap] [InstanceLoader] PassportModule dependencies initialized
[2024-09-08T17:26:41.527Z] [ERROR] [Bootstrap] [ExceptionHandler] Nest can't resolve dependencies of the StorageService (?). Please make sure that the argument JwtService at index [0] is available in the StorageModule context.

Potential solutions:
- Is StorageModule a valid NestJS module?
- If JwtService is a provider, is it part of the current StorageModule?
- If JwtService is exported from a separate @Module, is that module imported within StorageModule?
  @Module({
    imports: [ /* the Module containing JwtService */ ]
  })

[2024-09-08T17:26:41.527Z] [ERROR] [Bootstrap] [ExceptionHandler] Error: Nest can't resolve dependencies of the StorageService (?). Please make sure that the argument JwtService at index [0] is available in the StorageModule context.

Potential solutions:
- Is StorageModule a valid NestJS module?
- If JwtService is a provider, is it part of the current StorageModule?
- If JwtService is exported from a separate @Module, is that module imported within StorageModule?
  @Module({
    imports: [ /* the Module containing JwtService */ ]
  })

    at Injector.lookupComponentInParentModules (/home/travis/Projects/database/node_modules/@nestjs/core/injector/injector.js:254:19)
    at async Injector.resolveComponentInstance (/home/travis/Projects/database/node_modules/@nestjs/core/injector/injector.js:207:33)
    at async resolveParam (/home/travis/Projects/database/node_modules/@nestjs/core/injector/injector.js:128:38)
    at async Promise.all (index 0)
    at async Injector.resolveConstructorParams (/home/travis/Projects/database/node_modules/@nestjs/core/injector/injector.js:143:27)
    at async Injector.loadInstance (/home/travis/Projects/database/node_modules/@nestjs/core/injector/injector.js:70:13)
    at async Injector.loadProvider (/home/travis/Projects/database/node_modules/@nestjs/core/injector/injector.js:97:9)
    at async /home/travis/Projects/database/node_modules/@nestjs/core/injector/instance-loader.js:56:13
    at async Promise.all (index 3)
    at async InstanceLoader.createInstancesOfProviders (/home/travis/Projects/database/node_modules/@nestjs/core/injector/instance-loader.js:55:9)

</FILE>
<REQUEST>
getting errors
</REQUEST>